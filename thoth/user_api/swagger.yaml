swagger: "2.0"
info:
  title: Thoth user API
  version: "0.1"
basePath: "/api/v1/"
consumes:
  - application/json
produces:
  - application/json
paths:
  /image/metadata:
    post:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: post_image_metadata
      summary: Get metadata for the given image
      parameters:
        - name: image
          in: query
          required: true
          description: >
            Name of image - can also specify remote registry to pull
            image from.
          type: string
        - name: registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          type: string
        - name: registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            registry.
          type: string
        - name: verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from.
          type: boolean
          default: true
      responses:
        200:
          description: Information about the given image.
          schema:
            $ref: "#/definitions/ImageMetadataResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        403:
          description: If user is not authorized to pull image.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /analyze:
    post:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: post_analyze
      summary: Analyze the given image asynchronously.
      parameters:
        - name: image
          in: query
          required: true
          description: >
            Name of image - can also specify remote registry to pull
            image from.
          type: string
        - name: registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          type: string
        - name: registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            registry.
          type: string
        - name: origin
          in: query
          required: false
          description: >
            A remote where the image is being used. This is used for tracking as well as
            for automated reporting when results are available.
          type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers can debug
            analyzer.
          type: boolean
          default: false
        - name: verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from.
          type: boolean
          default: true
        - name: force
          type: boolean
          in: query
          required: false
          default: false
          description: >
            Do not use cached results, always run analysis.
      responses:
        202:
          description: Successful response with analyzer id.
          schema:
            $ref: "#/definitions/AnalysisResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

    get:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: list_analyze
      summary: Retrieve a list of document ids for analyzer results.
      parameters:
        - name: page
          in: query
          required: false
          default: 0
          description: Page offset in pagination.
          type: integer
      responses:
        200:
          description: A list of analyzer results available.
          schema:
            $ref: "#/definitions/AnalysisListingResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /analyze/{analysis_id}:
    get:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_analyze
      summary: Retrieve an analyzer result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Id of analysis that results should be retrieved.
          type: string
      responses:
        200:
          description: Analyzer result retrieved.
          schema:
            $ref: "#/definitions/AnalysisResultResponse"
        202:
          description: Results are not ready yet.
          schema:
            $ref: "#/definitions/AnalysisUnfinishedResultResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given document does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /analyze/by-hash/{image_hash}:
    get:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_by_hash
      summary: Retrieve an analyzer result.
      parameters:
        - name: image_hash
          in: path
          required: true
          description: Image hash for identifying image (including hash type, now supported only "sha256").
          type: string
      responses:
        200:
          description: Analyzer result retrieved.
          schema:
            $ref: "#/definitions/AnalysisResultResponse"
        202:
          description: Results are not ready yet.
          schema:
            $ref: "#/definitions/AnalysisUnfinishedResultResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given document does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"


  /analyze/{analysis_id}/log:
    get:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_log
      summary: Show logs of an analysis.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested analysis.
          type: string
      responses:
        200:
          description: Successful response.
          schema:
            $ref: "#/definitions/AnalysisLogResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given image analysis log does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /analyze/{analysis_id}/status:
    get:
      tags: ["Image Analysis"]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_status
      summary: Show analysis status.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested analysis.
          type: string
      responses:
        200:
          description: Successful response.
          schema:
            $ref: "#/definitions/AnalysisStatusResponse"
        404:
          description: No analysis with the given id found.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /provenance/python:
    post:
      tags: [Provenance]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: post_provenance_python
      summary: Check provenance of packages stated in an application stack.
      parameters:
        - name: application_stack
          in: body
          required: true
          description: Pipfile and Pipfile.lock as used by pipenv.
          schema:
            $ref: "#/definitions/PythonStack"
        - name: origin
          in: query
          required: false
          description: >
            A repository where the application stack is used. This is used for tracking as well as
            for automated reporting when results are available.
          type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the provenance checker in a verbose mode so developers
            can debug it.
          type: boolean
          default: false
        - name: force
          type: boolean
          in: query
          required: false
          default: false
          description: >
            Do not use cached results, always run provenance checks.
      responses:
        202:
          description: The provided files will be checked for provenance.
          schema:
            $ref: "#/definitions/AnalysisResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /provenance/python/{analysis_id}:
    get:
      tags: [Provenance]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python
      summary: Retrieve a provenance check result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Id of analysis to be retrieved.
          type: string
      responses:
        200:
          description: Provenance report retrieved.
          schema:
            $ref: "#/definitions/AnalysisResultResponse"
        202:
          description: Results are not ready yet.
          schema:
            $ref: "#/definitions/AnalysisUnfinishedResultResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given document does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /provenance/python/{analysis_id}/log:
    get:
      tags: [Provenance]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python_log
      summary: Show logs of a provenance checks.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested analysis.
          type: string
      responses:
        200:
          description: Successful response.
          schema:
            $ref: "#/definitions/AnalysisLogResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given image analysis log does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /provenance/python/{analysis_id}/status:
    get:
      tags: [Provenance]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python_status
      summary: Show status of a provenance check.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested provenance check.
          type: string
      responses:
        200:
          description: Successful response.
          schema:
            $ref: "#/definitions/AnalysisStatusResponse"
        404:
          description: No analysis with the given id found.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /runtime-environment:
    get:
      tags: [Environments]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: list_runtime_environments
      summary: Retrieve a list of runtime environments analyzed.
      parameters:
        - name: page
          in: query
          required: false
          default: 0
          description: Page offset in pagination.
          type: integer
      responses:
        200:
          description: A list of runtime environments.
          schema:
            # TODO: extend once we will need this.
            type: object
            additionalProperties: true
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /python-package-index:
    get:
      tags: [Info]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: list_python_package_indexes
      summary: List registered Python package indexes.
      responses:
        200:
          description: Listing of available Python package indexes.
          schema:
            $ref: "#/definitions/PythonPackageIndexes"

  /info:
    get:
      tags: [Info]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_info
      summary: Get information about Thoth deployment.
      responses:
        200:
          description: A core information about Thoth deployment.
          schema:
            $ref: "#/definitions/Info"

  /runtime-environment/{runtime_environment_name}/analyses:
    get:
      tags: [Environments]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: list_runtime_environment_analyses
      summary: List analyses for the given runtime environment.
      parameters:
        - name: runtime_environment_name
          in: path
          format: path
          required: true
          description: >
            Runtime environment name for which analyses should be retrieved.
          type: string
        - name: page
          in: query
          required: false
          default: 0
          description: Page offset in pagination.
          type: integer
      responses:
        200:
          description: Listing of analyses for the given runtime environment.
          schema:
            # TODO: extend once we will need this.
            type: object
            additionalProperties: true
        404:
          description: >
            The given runtime environment with the provided name was not found.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /runtime-environment/{runtime_environment_name}:
    get:
      tags: [Environments]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_runtime_environment
      summary: Retrieve runtime environment information.
      parameters:
        - name: runtime_environment_name
          in: path
          format: path
          required: true
          description: Runtime environment name to be retrieved.
          type: string
        - name: analysis_id
          in: query
          required: false
          description: >
            Specify analysis id for which results should be retrieved.
            If omitted, the latest will be used.
          type: string
      responses:
        200:
          description: >
            Listing of packages present in the given runtime environment.
          schema:
            # TODO: extend once we will need this.
            type: object
            additionalProperties: true
        404:
          description: >
            The given runtime environment with provided name was not found.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /advise/python:
    post:
      tags: [Advise]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: post_advise_python
      summary: Get advise for Python ecosystem.
      parameters:
        - name: input
          in: body
          required: true
          description: Specification of Python application stack with runtime specific information.
          schema:
            $ref: "#/definitions/AdviseInput"
        - name: recommendation_type
          in: query
          description: Recommendation type.
          type: string
          required: true
          enum:
            - stable
            - testing
            - latest
          default: stable
        - name: count
          in: query
          description: Number of software stacks that should be returned.
          type: integer
          required: false
        - name: limit
          in: query
          description: Limit number of software stacks scored.
          type: integer
          required: false
        - name: origin
          in: query
          required: false
          description: >
            A repository where the application stack is used. This is used for tracking as well as
            for automated reporting when results are available.
          type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given adviser in a verbose mode so developers can debug it.
          type: boolean
          default: false
        - name: limit_latest_versions
          in: query
          type: integer
          required: false
          description: Limit number of packages considering only specific number of versions for each package.
        - name: force
          type: boolean
          in: query
          required: false
          default: false
          description: >
            Do not use cached results, always run adviser.
      responses:
        202:
          description: The adviser is scheduled.
          schema:
            $ref: "#/definitions/AnalysisResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

    get:
      tags: [Advise]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: list_advise_python
      summary: Get adviser results available.
      parameters:
        - name: page
          in: query
          required: false
          default: 0
          description: Page offset in pagination.
          type: integer
      responses:
        200:
          description: A list of analyzer results available.
          schema:
            $ref: "#/definitions/AnalysisListingResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /advise/python/{analysis_id}/log:
    get:
      tags: [Advise]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python_log
      summary: Retrieve a adviser run log.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of analysis for which log should be retrieved.
          type: string
      responses:
        200:
          description: Retrieved adviser log.
          schema:
            $ref: "#/definitions/AnalysisLogResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given adviser log does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /advise/python/{analysis_id}/status:
    get:
      tags: [Advise]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python_status
      summary: Show status of an adviser computing recomemendations.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested adviser run.
          type: string
      responses:
        200:
          description: Successful response.
          schema:
            $ref: "#/definitions/AnalysisStatusResponse"
        404:
          description: No analysis with the given id found.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /advise/python/{analysis_id}:
    get:
      tags: [Advise]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python
      summary: Get computeted adviser result based on its id.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Advise id returned on advise request.
          type: string
      responses:
        200:
          description: >
            Computed pinned down stack with information based on
            requested requirements advise.
          schema:
            $ref: "#/definitions/AnalysisResultResponse"
        202:
          description: Results are not ready yet.
          schema:
            $ref: "#/definitions/AnalysisUnfinishedResultResponse"
        400:
          description: On invalid request.
          schema:
            $ref: "#/definitions/AnalysisResponseError"
        404:
          description: The given advise does not exist.
          schema:
            $ref: "#/definitions/AnalysisResponseError"

  /parse-log:
    post:
      tags: [Buildlogs]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: parse_log
      summary: >
        Parse Docker build log or installation log and show installed packages.
      parameters:
        - name: log_info
          in: body
          required: true
          description: A full log.
          schema:
            $ref: "#/definitions/Log"
      responses:
        200:
          description: Successful response.
        400:
          description: On invalid request.
        401:
          description: Invalid authorization secret.

  /buildlog:
    post:
      tags: [Buildlogs]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: post_buildlog
      summary: Store the given build log.
      parameters:
        - name: log_info
          in: body
          required: true
          description: Build log to be stored.
          schema:
            $ref: "#/definitions/Log"
      responses:
        202:
          description: Successful response.
        400:
          description: On invalid request.

    get:
      tags: [Buildlogs]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: list_buildlogs
      summary: Retrieve a list of document ids for stored build logs.
      parameters:
        - name: page
          in: query
          required: false
          default: 0
          description: Page offset in pagination.
          type: integer
      responses:
        200:
          description: A list of build log ids.
        400:
          description: On invalid request.

  /buildlog/{document_id}:
    get:
      tags: [Buildlogs]
      x-swagger-router-controller: thoth.user_api.api_v1
      operationId: get_buildlog
      summary: Retrieve the given build log.
      parameters:
        - name: document_id
          in: path
          required: true
          type: string
          description: Build log to be retrieved.
      responses:
        200:
          description: Successful response.
        400:
          description: On invalid request.
        404:
          description: The given build log does not exist.

definitions:
  Log:
    type: object
    required:
      - 'log'
    additionalProperties: false
    properties:
      log:
        type: string
        description: >
          A full build or installation log that was output during image build.
        example: >
          Collecting tensorflow
          Downloading tensorflow-1.4.1-cp36-cp36m-manylinux1_x86_64.whl (41.2MB)
          Successfully installed tensorflow-1.4.1
      apiversion:
        type: string
        description: >
          BuildLog api version.
        example: >
          "apis/build.openshift.io/v1/namespaces/$NAMESPACE/builds HTTP/1.1"
      kind:
        type: string
        description: >
          Type of log.
        example: >
          "BuildLog"
      metadata:
        type: string
        properties:
          annotations:
            type: string
            properties:
              buildlog.thoth-station.ninja/corresponding-build-configuration:
                type: string
                description: >
                 Contains all particulars about the build log.
                example: >
                   "apiVersion:build.openshift.io/v1"
  PythonStack: &pythonStack
    type: object
    required:
      - 'requirements'
      - 'requirements_lock'
    additionalProperties: false
    properties:
      requirements: &pythonRequiremnets
        type: string
        minLength: 1
        description: Direct dependencies for the application stack.
        example: |
          [[source]]
          url = "https://pypi.python.org/simple"
          verify_ssl = true
          name = "pypi"

          [packages]
          daiquiri = "*"

          [dev-packages]
      requirements_lock: &pythonRequirementsLock
        type: string
        description: Fully pinned down dependency stack.
        example:
          '{
            "_meta": {
                "hash": {
                    "sha256": "fecd8a66514e1129f796d7a45a1f5b2f7733e3ae0ead487ca63752da680ab8e4"
                },
                "pipfile-spec": 6,
                "requires": {},
                "sources": [
                    {
                        "name": "pypi",
                        "url": "https://pypi.python.org/simple",
                        "verify_ssl": true
                    }
                ]
            },
            "default": {
                "daiquiri": {
                    "hashes": [
                        "sha256:1c4942ef0d40920100162ede6024edd43734e40b8dca9b13ebaf4b52ea198457",
                        "sha256:eb300dfddae43dfdb157938a854b1387298b8fb340d6ecb7b5ae867283af763e"
                    ],
                    "index": "pypi",
                    "version": "==1.4.0"
                }
            },
            "develop": {}
          }'
      requirements_format:
        type: string
        description: >
          Lockfile format - defaults to pipenv if not explicitly specified.
        items:
          type: string
        enum:
          - pipenv
          - requirements
        example: pipenv
  RuntimeEnvironment: &runtimeEnvironment
    type: object
    description: Runtime environment description, see Thamos configuration for more info.
    properties:
      hardware:
        type: object
        additionalProperties: true
      operating_system:
        type: object
        additionalProperties: true
      python_version:
        type: string
        example: "3.6"
      cuda_version:
        type: string
        example: "9.0"
      name:
        type: string
        example: "fedora:29-prod"
    additionalProperties: true
  AdviseInput:
    type: object
    required:
      - application_stack
    additionalProperties: false
    properties:
      application_stack: *pythonStack
      runtime_environment: *runtimeEnvironment
  ImageMetadataResponse:
    type: object
    description: Response information with image metadata.
    additionalProperties: false
    properties:
      name:
        type: string
        description: Name of the image with optional tag.
        example: 'fedora'
      tag:
        type: string
        description: Tag of the image.
        example: 'latest'
      digest:
        type: string
        description: Digest of the image.
        example: sha256:cfd8f071bf8da7a466748f522406f7ae5908d002af1b1a1c0dcf893e183e5b32''
      repo_tags:
        type: array
        items:
          type: string
          description: Tags available in the registry repository.
      created:
        type: string
        description: Image creation date and time.
        example: "2016-03-04T18:40:02.92155334Z"
      docker_version:
        type: string
        description: Version of Docker.
        example: "1.9.1"
      labels:
        type: object
        additionalProperties: true
        description: Image labels.
      architecture:
        type: string
        description: Target architecture of image.
        example: "amd64"
      os:
        type: string
        description: "Operating system identifier."
      layers:
        type: array
        items:
          type: string
          description: Digests of image layesrs.
    required:
      - name
      - tag
      - digest
      - repo_tags
      - created
      - docker_version
      - labels
      - architecture
      - os
      - layers
  AnalysisResponse:
    type: object
    description: Response for a submitted analysis.
    additionalProperties: false
    properties:
      analysis_id:
        type: string
        description: >
          An id of submitted analysis for checking its status and its results.
      parameters:
        type: object
        description: >
          Parameters echoed back to user (with default parameters if omitted).
      cached:
        type: boolean
        description: >
          If set to true the given analysis was picked from cache.
    required:
      - analysis_id
      - parameters
      - cached
  Info:
    type: object
    description: Information about Thoth deployment.
    additionalProperties: false
    properties:
      deployment_name:
        type: string
        description: Name of deployment.
        example: 'staging'
      version:
        type: string
        description: Version of Thoth components deployed. A special value @dev signalizes a developer's build.
        example: 'master'
      s3_endpoint_url:
        type: string
        description: S3 endpoint used for storing results.
        example: 'https://s3.redhat.com/'
      s3_bucket_prefix:
        type: string
        description: Bucket prefix used when storing results on S3 compatible API (Ceph).
        example: 'data/thoth'
      janusgraph_host:
        type: string
        description: JanusGraph instance to which the deployment talks to.
        example: 'test-2.janusgraph.thoth-station.ninja'
      amun_api_url:
        type: string
        description: Amun API host to which this deployment talks to (set to null if no Amun deployment is used).
        example: 'https://amun-api.thoth.redhat.com/'
        x-nullable: true
      frontend_namespace:
        type: string
        description: Frontend namespace name.
        example: 'thoth-frontend-staging'
      middletier_namespace:
        type: string
        description: Frontend namespace name.
        example: 'thoth-middletier-staging'
      backend_namespace:
        type: string
        description: Frontend namespace name.
        example: 'thoth-backend-staging'
  PythonPackageIndexes:
    type: array
    description: A listing of Python package indexes.
    items:
      type: object
      description: A Python package index.
      required:
        - url
        - warehouse_api_url
        - verify_ssl
      properties:
        url:
          type: string
          description: URL to the Python simple repository as described in PEP 503.
          example: http://pypi.org/simple
        warehouse_api_url:
          type: string
          description: URL to the warehouse API.
          example: https://pypi.org/pypi
        verify_ssl:
          type: boolean
          description: Use secured connection to warehouse.
          example: true
  AnalysisResponseError:
    type: object
    required:
      - error
      - parameters
    properties:
      error:
        type: string
        description: Error information for user.
      parameters:
        type: object
        description: Parameters echoed back to user for debugging.
  AnalysisResultResponse:
    type: object
    additionalProperties: false
    description: Result of an analysis
    required:
      - metadata
      - result
    properties:
      metadata:
        type: object
        description: Metadata for analysis run.
        additionalProperties: false
        required:
          - analyzer
          - analyzer_version
          - arguments
          - datetime
          - distribution
          - hostname
          - python
        properties:
          analyzer:
            type: string
            description: Analyzer name which handled analysis.
          analyzer_version:
            type: string
            description: Version of analyzer handling analysis.
          arguments:
            type: object
            additionalProperties: true
            description: Arguments passed to analyzer.
          datetime:
            type: string
            description: Date and time of analysis end in ISO format.
          distribution:
            type: object
            description: >
              Information about environment in which the analysis
              was performed.
            required:
              - codename
              - id
              - like
              - version
              - version_parts
            properties:
              codename:
                type: string
                description: >
                  Codename of environment in which the analysis was perfomed.
              id:
                type: string
                description: >
                  Identifier of environment in which the analysis
                  was perfomed.
              like:
                type: string
                description: >
                  Similar environments in comparision to environment in
                  which the analysis was perfomed.
              version:
                type: string
                description: A string representation of environment version.
              version_parts:
                type: object
                description: >
                  Parts of version identifier of the analysing environment.
                properties:
                  build_number:
                    type: string
                  major:
                    type: string
                  minor:
                    type: string
                additionalProperties: false
                required:
                  - build_number
                  - major
                  - minor
          hostname:
            type: string
            description: Pod name where the analysis was done.
          python:
            required:
              - api_version
              - implementation_name
              - major
              - minor
              - micro
              - releaselevel
              - serial
            properties:
              api_version:
                type: integer
              implementation_name:
                type: string
                example: cpython
              major:
                type: integer
              micro:
                type: integer
              minor:
                type: integer
              releaselevel:
                type: string
                example: final
              serial:
                type: integer
      result:
        type: object
        additionalProperties: true
        description: Actual result of an analysis run.
  AnalysisListingResponse:
    type: object
    description: Listing of available results.
    additionalProperties: false
    required:
      - result
      - parameters
    properties:
      result:
        type: array
        description: List of available analysis ids.
        items:
          type: string
          description: Analysis id that is used as a document id.
      parameters:
        type: object
        description: Parameters echoed back to user.
        additionalProperties: true
  AnalysisStatusResponse: &analysisStatus
    type: object
    description: Information about the current analysis status.
    additionalProperties: false
    required:
      - parameters
      - status
    properties:
      status:
        type: object
        description: Status information about the analysis run.
        additionalProperties: false
        required:
          - container
          - exit_code
          - finished_at
          - reason
          - started_at
          - state
        properties:
          container:
            type: string
            description: SHA of container image in which the analysis is done.
            x-nullable: true
          exit_code:
            type: integer
            description: Return code of the process perfoming analysis.
            x-nullable: true
          finished_at:
            type: string
            description: >
              Datetime in ISO format informing about when the analysis
              has finished.
            x-nullable: true
          reason:
            type: string
            description: Reasoning on finished run.
            x-nullable: true
          started_at:
            type: string
            description: >
              Datetime in ISO format informing about when the analysis
              has started.
          state:
            type: string
            example: terminated
      parameters:
        type: object
        description: Parameters echoed back to user for debugging.
        additionalProperties: true
  AnalysisUnfinishedResultResponse:
    type: object
    required:
      - error
      - parameters
      - status
    properties:
      error:
        type: string
        description: Error information for user.
      parameters:
        type: object
        description: Parameters echoed back to user for debugging.
      status: *analysisStatus
  AnalysisLogResponse:
    type: object
    required:
      - log
      - parameters
    properties:
      log:
        type: string
        description: Analyzer logs printed to stdout/stderr as a plain text.
        x-nullable: true
      parameters:
        type: object
        description: Parameters echoed back to user for debugging.
