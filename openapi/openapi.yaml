openapi: "3.0.0"
info:
  title: Thoth User API
  version: "0.4.0"
servers:
  - url: "/api/v1"
paths:
  /image/metadata:
    post:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_image_metadata
      summary: Get metadata for the given image
      parameters:
        - name: image
          in: query
          required: true
          description: >
            Name of image - can also specify remote registry to pull
            image from.
          schema:
            type: string
        - name: registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          schema:
            type: string
        - name: registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            registry.
          schema:
            type: string
        - name: verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from.
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: Information about the given image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageMetadataResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "403":
          description: If user is not authorized to pull image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze:
    post:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_analyze
      summary: Analyze the given image asynchronously.
      parameters:
        - name: image
          in: query
          required: true
          description: >
            Name of image - can also specify remote registry to pull
            image from.
          schema:
            type: string
        - name: registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          schema:
            type: string
        - name: registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            registry.
          schema:
            type: string
        - name: environment_type
          in: query
          required: false
          description: >
            Type of environment (runtime or buildtime) which is being analyzed.
          schema:
            type: string
            enum:
              - buildtime
              - runtime
            default: runtime
        - name: origin
          in: query
          required: false
          description: >
            A remote where the image is being used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers can debug
            analyzer.
          schema:
            type: boolean
            default: false
        - name: verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from.
          schema:
            type: boolean
            default: true
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run analysis.
      responses:
        "202":
          description: Successful response with analyzer id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_analyze
      summary: Retrieve a list of document ids for analyzer results.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: A list of analyzer results available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisListingResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/{analysis_id}:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze
      summary: Retrieve an analyzer result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Id of analysis that results should be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Analyzer result retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnfinishedResultResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/by-hash/{image_hash}:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_by_hash
      summary: Retrieve an analyzer result.
      parameters:
        - name: image_hash
          in: path
          required: true
          description: Image hash for identifying image (including hash type, now supported only "sha256").
          schema:
            type: string
      responses:
        "200":
          description: Analyzer result retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnfinishedResultResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/{analysis_id}/log:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_log
      summary: Show logs of an analysis.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested analysis.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisLogResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given image analysis log does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/{analysis_id}/status:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_status
      summary: Show analysis status.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested analysis.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "404":
          description: No analysis with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python:
    post:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_provenance_python
      summary: Check provenance of packages stated in an application stack.
      requestBody:
        required: true
        description: Pipfile and Pipfile.lock as used by pipenv.
        content:
          application/json:
            schema:
              x-body-name: application_stack
              $ref: "#/components/schemas/PythonStack"
      parameters:
        - name: origin
          in: query
          required: false
          description: >
            A repository where the application stack is used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the provenance checker in a verbose mode so developers
            can debug it.
          schema:
            type: boolean
            default: false
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run provenance checks.
      responses:
        "202":
          description: The provided files will be checked for provenance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python/{analysis_id}:
    get:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python
      summary: Retrieve a provenance check result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Id of analysis to be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Provenance report retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnfinishedResultResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python/{analysis_id}/log:
    get:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python_log
      summary: Show logs of a provenance checks.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested analysis.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisLogResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given image analysis log does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python/{analysis_id}/status:
    get:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python_status
      summary: Show status of a provenance check.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested provenance check.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "404":
          description: No analysis with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /run-software-environment:
    get:
      tags: [Image Analysis]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_software_environments_for_run
      summary: Retrieve a list of software environments analyzed for run.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: A list of software environments for run.
          content:
            application/json:
              schema:
                # TODO: extend once we will need this.
                type: object
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /build-software-environment:
    get:
      tags: [Image Analysis]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_software_environments_for_build
      summary: Retrieve a list of software environments analyzed for build.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: A list of software environments for build.
          content:
            application/json:
              schema:
                # TODO: extend once we will need this.
                type: object
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /python-package-index:
    get:
      tags: [Info]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_python_package_indexes
      summary: List registered Python package indexes.
      responses:
        "200":
          description: Listing of available Python package indexes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageIndexes"

  /runtime-envrionment:
    get:
      tags: [Info]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_runtime_environments
      summary: Retrieve a list of supported runtime environments
      responses:
        "200":
          description: A list of supported runtime environments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - parameters
                  - runtime_environments
                properties:
                  parameters:
                    type: object
                    description: Parameters echoed back to user.
                  runtime_environments:
                    type: array
                    items:
                      type: object
                      description: Available runtime environment configurations.
                      required:
                        - os_name
                        - os_version
                        - python_version
                      properties:
                        os_name:
                          type: string
                          description: Name of the operating system which is supported.
                          example: ubi
                        os_version:
                          type: string
                          description: Version of the operating system which is supported.
                          example: "8"
                        python_version:
                          type: string
                          description: Supported Python version.
                          example: "3.6"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /run-software-environment/analyses/{environment_name}:
    get:
      tags: [Image Analysis]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_software_environment_analyses_for_run
      summary: List analyses for the given software environment for run.
      parameters:
        - name: environment_name
          in: path
          required: true
          description: >
            Software environment name for run for which analyses should be retrieved.
          schema:
            format: path
            type: string
      responses:
        "200":
          description: Listing of analyses for the given software environment for run.
          content:
            application/json:
              schema:
                # TODO: extend once we will need this.
                type: object
        "404":
          description: >
            The given software environment for run with the provided name was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /build-software-environment/analyses/{environment_name}:
    get:
      tags: [Image Analysis]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_software_environment_analyses_for_build
      summary: List analyses for the given software environment for build.
      parameters:
        - name: environment_name
          in: path
          required: true
          description: >
            Software environment name for build for which analyses should be retrieved.
          schema:
            format: path
            type: string
      responses:
        "200":
          description: Listing of analyses for the given software environment for build.
          content:
            application/json:
              schema:
                # TODO: extend once we will need this.
                type: object
        "404":
          description: >
            The given software environment for build with the provided name was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /advise/python:
    post:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_advise_python
      summary: Get advise for Python ecosystem.
      requestBody:
        required: true
        description: Specification of Python application stack with runtime specific information.
        content:
          application/json:
            schema:
              x-body-name: input
              $ref: "#/components/schemas/AdviseInput"
      parameters:
        - name: recommendation_type
          in: query
          description: Recommendation type.
          required: true
          schema:
            type: string
            enum:
              - stable
              - testing
              - latest
            default: stable
        - name: count
          in: query
          description: Number of software stacks that should be returned.
          schema:
            type: integer
          required: false
        - name: limit
          in: query
          description: Limit number of software stacks scored.
          schema:
            type: integer
          required: false
        - name: origin
          in: query
          required: false
          description: >
            A repository where the application stack is used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given adviser in a verbose mode so developers can debug it.
          schema:
            type: boolean
            default: false
        - name: limit_latest_versions
          in: query
          schema:
            type: integer
          required: false
          description: Limit number of packages considering only specific number of versions for each package.
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run adviser.
      responses:
        "202":
          description: The adviser is scheduled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_advise_python
      summary: Get adviser results available.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            default: 0
            type: integer
      responses:
        "200":
          description: A list of analyzer results available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisListingResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /advise/python/{analysis_id}/log:
    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python_log
      summary: Retrieve a adviser run log.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of analysis for which log should be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Retrieved adviser log.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisLogResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given adviser log does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /advise/python/{analysis_id}/status:
    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python_status
      summary: Show status of an adviser computing recommendations.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested adviser run.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "404":
          description: No analysis with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /advise/python/{analysis_id}:
    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python
      summary: Get computed adviser result based on its id.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Advise id returned on advise request.
          schema:
            type: string
      responses:
        "200":
          description: >
            Computed pinned down stack with information based on
            requested requirements advise.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnfinishedResultResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given advise does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /buildlog:
    post:
      tags: [Buildlogs]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_buildlog
      summary: Store the given build log.
      requestBody:
        required: true
        description: Build log to be stored.
        content:
          application/json:
            schema:
              x-body-name: log_info
              $ref: "#/components/schemas/Log"
      responses:
        "202":
          description: Successful response.
        "400":
          description: On invalid request.

    get:
      tags: [Buildlogs]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_buildlogs
      summary: Retrieve a list of document ids for stored build logs.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            default: 0
            type: integer
      responses:
        "200":
          description: A list of build log ids.
        "400":
          description: On invalid request.

  /buildlog/{document_id}:
    get:
      tags: [Buildlogs]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_buildlog
      summary: Retrieve the given build log.
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
          description: Build log to be retrieved.
      responses:
        "200":
          description: Successful response.
        "400":
          description: On invalid request.
        "404":
          description: The given build log does not exist.

  /kebechet:
    post:
      tags: [Kebechet]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: schedule_kebechet
      summary: Schedule kebechet instance from webhook
      requestBody:
        required: true
        description: Body of a git service webhook
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "202":
          description: Accepted
        "400":
          description: Invalid
        "501":
          description: Functionality not supported

  /build-analysis:
    post:
      tags: [Build Analysis]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_build
      summary: Analyze the given build imagestream and log.
      requestBody:
        required: true
        description: Fill up the Build details such as output imagestream, base imagestream, and build log.
        content:
          application/json:
            schema:
              x-body-name: build_detail
              $ref: "#/components/schemas/Build"
      parameters:
        - name: registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          schema:
            type: string
        - name: registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            registry.
          schema:
            type: string
        - name: environment_type
          in: query
          required: false
          description: >
            Type of environment (runtime or buildtime) which is being analyzed.
          schema:
            type: string
            enum:
              - buildtime
              - runtime
            default: runtime
        - name: origin
          in: query
          required: false
          description: >
            A remote where the image is being used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers can debug
            analyzer.
          schema:
            type: boolean
            default: false
        - name: registry_verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from.
          schema:
            type: boolean
            default: true
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run analysis.
      responses:
        "202":
          description: Successful response with analyzer id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildAnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildAnalysisResponseError"

  /buildlog-analyze:
    get:
      tags: ["Buildlogs"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_buildlog_analyze
      summary: Retrieve a list of document ids for build analyzer results.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: A list of build analyzer results available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisListingResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /buildlog-analyze/{analysis_id}:
    get:
      tags: ["Buildlogs"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_buildlog_analyze
      summary: Retrieve a build analyzer result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Id of analysis that results should be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Build Analyzer result retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnfinishedResultResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

components:
  schemas:
    Build:
      type: object
      properties:
        base_image:
          type: string
          nullable: true
          description: >
            Name of base image used by the s2i build.
          example: >
            registry.centos.org/centos/python-36-centos7
        output_image:
          type: string
          nullable: true
          description: >
            Name of output image - can also specify remote registry to pull
            image from.
          example: >
            registry.centos.org/centos/python-36-centos7
        build_log:
          type: object
          description: >
            A full build details along with the log.
          properties:
            log:
              type: string
              nullable: true
              description: >
                A full build or installation log that was output during image build.
              example: >
                Collecting tensorflow
                Downloading tensorflow-1.4.1-cp36-cp36m-manylinux1_x86_64.whl (41.2MB)
                Successfully installed tensorflow-1.4.1
            apiversion:
              type: string
              nullable: true
              description: >
                BuildLog api version.
              example: >
                "apis/build.openshift.io/v1/namespaces/$NAMESPACE/builds HTTP/1.1"
            kind:
              type: string
              nullable: true
              description: >
                Type of log.
              example: >
                "BuildLog"
            metadata:
              type: string
              nullable: true
              properties:
                annotations:
                  type: string
                  properties:
                    buildlog.thoth-station.ninja/corresponding-build-configuration:
                      type: string
                      description: >
                        Contains all particulars about the build log.
                      example: >
                        "apiVersion:build.openshift.io/v1"
    Log:
      type: object
      required:
        - "log"
      properties:
        log:
          type: string
          description: >
            A full build or installation log that was output during image build.
          example: >
            Collecting tensorflow
            Downloading tensorflow-1.4.1-cp36-cp36m-manylinux1_x86_64.whl (41.2MB)
            Successfully installed tensorflow-1.4.1
        apiversion:
          type: string
          description: >
            BuildLog api version.
          example: >
            "apis/build.openshift.io/v1/namespaces/$NAMESPACE/builds HTTP/1.1"
        kind:
          type: string
          description: >
            Type of log.
          example: >
            "BuildLog"
        metadata:
          type: string
          properties:
            annotations:
              type: string
              properties:
                buildlog.thoth-station.ninja/corresponding-build-configuration:
                  type: string
                  description: >
                    Contains all particulars about the build log.
                  example: >
                    "apiVersion:build.openshift.io/v1"
    PythonStack:
      type: object
      required:
        - "requirements"
        - "requirements_lock"
      properties:
        requirements:
          type: string
          minLength: 1
          description: Direct dependencies for the application stack.
          example: |
            [[source]]
            url = "https://pypi.python.org/simple"
            verify_ssl = true
            name = "pypi"

            [packages]
            daiquiri = "*"

            [dev-packages]
        requirements_lock:
          type: string
          description: Fully pinned down dependency stack.
          example: '{
            "_meta": {
            "hash": {
            "sha256": "fecd8a66514e1129f796d7a45a1f5b2f7733e3ae0ead487ca63752da680ab8e4"
            },
            "pipfile-spec": 6,
            "requires": {},
            "sources": [
            {
            "name": "pypi",
            "url": "https://pypi.python.org/simple",
            "verify_ssl": true
            }
            ]
            },
            "default": {
            "daiquiri": {
            "hashes": [
            "sha256:1c4942ef0d40920100162ede6024edd43734e40b8dca9b13ebaf4b52ea198457",
            "sha256:eb300dfddae43dfdb157938a854b1387298b8fb340d6ecb7b5ae867283af763e"
            ],
            "index": "pypi",
            "version": "==1.4.0"
            }
            },
            "develop": {}
            }'
        requirements_format:
          type: string
          description: >
            Lockfile format - defaults to pipenv if not explicitly specified.
          items:
            type: string
          enum:
            - pipenv
            - requirements
          example: pipenv
    RuntimeEnvironment:
      type: object
      description: Runtime environment description, see Thamos configuration for more info.
      properties:
        hardware:
          type: object
          description: Hardware configuration used.
        operating_system:
          type: object
          description: Operating system used.
        python_version:
          type: string
          example: "3.6"
          description: Python version on which the application runs on.
        cuda_version:
          type: string
          example: "9.0"
          description: Nvidia CUDA version which the application uses.
        name:
          type: string
          example: "fedora:29-prod"
          description: User defined name of the runtime environment.
        ipython:
          type: object
          description: >
            Additional information captured when recommendations were requested for Jupyter Notebook environments.
    AdviseInput:
      type: object
      required:
        - application_stack
      properties:
        application_stack:
          $ref: "#/components/schemas/PythonStack"
        runtime_environment:
          $ref: "#/components/schemas/RuntimeEnvironment"
        library_usage:
          type: object
          description: Static analysis of libraries used within user's project.
          required:
            - version
            - report
          properties:
            version:
              type: string
            report:
              type: object
    ImageMetadataResponse:
      type: object
      description: Response information with image metadata.
      properties:
        name:
          type: string
          description: Name of the image with optional tag.
          example: "fedora"
        tag:
          type: string
          description: Tag of the image.
          example: "latest"
        digest:
          type: string
          description: Digest of the image.
          example: sha256:cfd8f071bf8da7a466748f522406f7ae5908d002af1b1a1c0dcf893e183e5b32''
        repo_tags:
          type: array
          items:
            type: string
            description: Tags available in the registry repository.
        created:
          type: string
          description: Image creation date and time.
          example: "2016-03-04T18:40:02.92155334Z"
        docker_version:
          type: string
          description: Version of Docker.
          example: "1.9.1"
        labels:
          type: object
          description: Image labels.
        architecture:
          type: string
          description: Target architecture of image.
          example: "amd64"
        os:
          type: string
          description: "Operating system identifier."
        layers:
          type: array
          items:
            type: string
            description: Digests of image layesrs.
      required:
        - name
        - tag
        - digest
        - repo_tags
        - created
        - docker_version
        - labels
        - architecture
        - os
        - layers
    BuildAnalysisResponse:
      type: object
      description: Response for a submitted build analysis.
      properties:
        base_image_analysis:
          type: object
          description: Response for a submitted analysis.
          properties:
            analysis_id:
              type: string
              description: >
                An id of submitted analysis for checking its status and its results.
            parameters:
              type: object
              description: >
                Parameters echoed back to user (with default parameters if omitted).
            cached:
              type: boolean
              description: >
                If set to true the given analysis was picked from cache.
        output_image_analysis:
          type: object
          description: Response for a submitted analysis.
          properties:
            analysis_id:
              type: string
              description: >
                An id of submitted analysis for checking its status and its results.
            parameters:
              type: object
              description: >
                Parameters echoed back to user (with default parameters if omitted).
            cached:
              type: boolean
              description: >
                If set to true the given analysis was picked from cache.
        build_log_analysis:
          type: object
          description: Response for a submitted analysis.
          properties:
            analysis_id:
              type: string
              description: >
                An id of submitted analysis for checking its status and its results.
            parameters:
              type: object
              description: >
                Parameters echoed back to user (with default parameters if omitted).
            cached:
              type: boolean
              description: >
                If set to true the given analysis was picked from cache.
      required:
        - base_image_analysis
        - output_image_analysis
        - build_log_analysis
    AnalysisResponse:
      type: object
      description: Response for a submitted analysis.
      properties:
        analysis_id:
          type: string
          description: >
            An id of submitted analysis for checking its status and its results.
        parameters:
          type: object
          description: >
            Parameters echoed back to user (with default parameters if omitted).
        cached:
          type: boolean
          description: >
            If set to true the given analysis was picked from cache.
      required:
        - analysis_id
        - parameters
        - cached
    Info:
      type: object
      description: Information about Thoth deployment.
      properties:
        deployment_name:
          type: string
          description: Name of deployment.
          example: "staging"
        version:
          type: string
          description: Version of Thoth components deployed. A special value @dev signalizes a developer's build.
          example: "master"
        s3_endpoint_url:
          type: string
          description: S3 endpoint used for storing results.
          example: "https://s3.redhat.com/"
        s3_bucket_prefix:
          type: string
          description: Bucket prefix used when storing results on S3 compatible API (Ceph).
          example: "data/thoth"
        dgraph_host:
          type: string
          description: Dgraph instance to which the deployment talks to.
          example: "dgraph.thoth-station.ninja"
        amun_api_url:
          type: string
          description: Amun API host to which this deployment talks to (set to null if no Amun deployment is used).
          example: "https://amun-api.thoth.redhat.com/"
          nullable: true
        frontend_namespace:
          type: string
          description: Frontend namespace name.
          example: "thoth-frontend-staging"
        middletier_namespace:
          type: string
          description: Frontend namespace name.
          example: "thoth-middletier-staging"
        backend_namespace:
          type: string
          description: Frontend namespace name.
          example: "thoth-backend-staging"
    PythonPackageIndexes:
      type: array
      description: A listing of Python package indexes.
      items:
        type: object
        description: A Python package index.
        required:
          - url
          - warehouse_api_url
          - verify_ssl
        properties:
          url:
            type: string
            description: URL to the Python simple repository as described in PEP 503.
            example: http://pypi.org/simple
          warehouse_api_url:
            type: string
            description: URL to the warehouse API.
            example: https://pypi.org/pypi
            nullable: true
          verify_ssl:
            type: boolean
            description: Use secured connection to warehouse.
            example: true
    BuildAnalysisResponseError:
      type: object
      description: Error Response for a submitted build analysis.
      properties:
        base_image_analysis:
          type: object
          properties:
            error:
              type: string
              description: Error information for user.
            parameters:
              type: object
              description: Parameters echoed back to user for debugging.
        output_image_analysis:
          type: object
          properties:
            error:
              type: string
              description: Error information for user.
            parameters:
              type: object
              description: Parameters echoed back to user for debugging.
        build_log_analysis:
          type: object
          properties:
            error:
              type: string
              description: Error information for user.
            parameters:
              type: object
              description: Parameters echoed back to user for debugging.
      required:
        - base_image_analysis
        - output_image_analysis
        - build_log_analysis
    AnalysisResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    AnalysisResultResponse:
      type: object
      description: Result of an analysis
      required:
        - metadata
        - result
      properties:
        metadata:
          type: object
          description: Metadata for analysis run.
          required:
            - analyzer
            - analyzer_version
            - arguments
            - datetime
            - distribution
            - hostname
            - python
          properties:
            analyzer:
              type: string
              description: Analyzer name which handled analysis.
            analyzer_version:
              type: string
              description: Version of analyzer handling analysis.
            arguments:
              type: object
              description: Arguments passed to analyzer.
            datetime:
              type: string
              description: Date and time of analysis end in ISO format.
            distribution:
              type: object
              description: >
                Information about environment in which the analysis
                was performed.
              required:
                - codename
                - id
                - like
                - version
                - version_parts
              properties:
                codename:
                  type: string
                  description: >
                    Codename of environment in which the analysis was perfomed.
                id:
                  type: string
                  description: >
                    Identifier of environment in which the analysis
                    was perfomed.
                like:
                  type: string
                  description: >
                    Similar environments in comparision to environment in
                    which the analysis was perfomed.
                version:
                  type: string
                  description: A string representation of environment version.
                version_parts:
                  type: object
                  description: >
                    Parts of version identifier of the analysing environment.
                  properties:
                    build_number:
                      type: string
                    major:
                      type: string
                    minor:
                      type: string
                  required:
                    - build_number
                    - major
                    - minor
            hostname:
              type: string
              description: Pod name where the analysis was done.
            python:
              type: object
              required:
                - api_version
                - implementation_name
                - major
                - minor
                - micro
                - releaselevel
                - serial
              properties:
                api_version:
                  type: integer
                implementation_name:
                  type: string
                  example: cpython
                major:
                  type: integer
                micro:
                  type: integer
                minor:
                  type: integer
                releaselevel:
                  type: string
                  example: final
                serial:
                  type: integer
        result:
          type: object
          description: Actual result of an analysis run.
    AnalysisListingResponse:
      type: object
      description: Listing of available results.
      required:
        - result
        - parameters
      properties:
        result:
          type: array
          description: List of available analysis ids.
          items:
            type: string
            description: Analysis id that is used as a document id.
        parameters:
          type: object
          description: Parameters echoed back to user.
    AnalysisStatusResponse:
      type: object
      description: Information about the current analysis status.
      required:
        - parameters
        - status
      properties:
        status:
          type: object
          description: Status information about the analysis run.
          required:
            - container
            - exit_code
            - finished_at
            - reason
            - started_at
            - state
          properties:
            container:
              type: string
              description: SHA of container image in which the analysis is done.
              nullable: true
            exit_code:
              type: integer
              description: Return code of the process perfoming analysis.
              nullable: true
            finished_at:
              type: string
              description: >
                Datetime in ISO format informing about when the analysis
                has finished.
              nullable: true
            reason:
              type: string
              description: Reasoning on finished run.
              nullable: true
            started_at:
              type: string
              nullable: true
              description: >
                Datetime in ISO format informing about when the analysis
                has started.
            state:
              type: string
              example: terminated
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    AnalysisUnfinishedResultResponse:
      type: object
      required:
        - error
        - parameters
        - status
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
        status:
          $ref: "#/components/schemas/AnalysisStatusResponse"
    AnalysisLogResponse:
      type: object
      required:
        - log
        - parameters
      properties:
        log:
          type: string
          description: Analyzer logs printed to stdout/stderr as a plain text.
          nullable: true
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
