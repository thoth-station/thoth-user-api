openapi: "3.0.0"
info:
  title: Thoth User API
  version: "0.6.0-dev"
servers:
  - url: "/api/v1"
paths:
  /image/metadata:
    post:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_image_metadata
      summary: Get metadata for the given image
      parameters:
        - $ref: "#/components/parameters/image"
        - $ref: "#/components/parameters/registry_user"
        - $ref: "#/components/parameters/registry_password"
        - $ref: "#/components/parameters/verify_tls"
      responses:
        "200":
          description: Information about the given image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageMetadataResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "403":
          description: If user is not authorized to pull image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze:
    post:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_analyze
      summary: Analyze the given image asynchronously.
      parameters:
        - $ref: "#/components/parameters/image"
        - $ref: "#/components/parameters/registry_user"
        - $ref: "#/components/parameters/registry_password"
        - name: environment_type
          in: query
          required: false
          description: >
            Type of environment (runtime or buildtime) which is being analyzed.
          schema:
            type: string
            enum:
              - buildtime
              - runtime
            default: runtime
        - name: origin
          in: query
          required: false
          description: >
            A remote where the image is being used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers can debug
            analyzer.
          schema:
            type: boolean
            default: false
        - $ref: "#/components/parameters/verify_tls"
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run analysis.
      responses:
        "202":
          description: Successful response with analyzer id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/{analysis_id}:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze
      summary: Retrieve an analyzer result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Id of analysis that results should be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Analyzer result retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/by-hash/{image_hash}:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_by_hash
      summary: Retrieve an analyzer result.
      parameters:
        - name: image_hash
          in: path
          required: true
          description: Image hash for identifying image (including hash type, now supported only "sha256").
          schema:
            type: string
      responses:
        "200":
          description: Analyzer result retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/{analysis_id}/log:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_log
      summary: Show logs of an analysis.
      parameters:
        - $ref: "#/components/parameters/analysis_id"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisLogResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given image analysis log does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /analyze/{analysis_id}/status:
    get:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_analyze_status
      summary: Show analysis status.
      parameters:
        - $ref: "#/components/parameters/analysis_id"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "404":
          description: No analysis with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python:
    post:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_provenance_python
      summary: Check provenance of packages stated in an application stack.
      requestBody:
        required: true
        description: Input to be checked for provenance.
        content:
          application/json:
            schema:
              x-body-name: input
              $ref: "#/components/schemas/ProvenanceInput"
      parameters:
        - name: origin
          in: query
          required: false
          description: >
            A repository where the application stack is used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the provenance checker in a verbose mode so developers
            can debug it.
          schema:
            type: boolean
            default: false
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run provenance checks.
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: API token for sending authenticated requests.
      responses:
        "202":
          description: The provided files will be checked for provenance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisWithAuthenticationResponse"
        "401":
          description: Unauthorized request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnauthorizedError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python/{analysis_id}:
    get:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python
      summary: Retrieve a provenance check result.
      parameters:
        - $ref: "#/components/parameters/analysis_id"
      responses:
        "200":
          description: Provenance report retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python/{analysis_id}/log:
    get:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python_log
      summary: Show logs of a provenance checks.
      parameters:
        - $ref: "#/components/parameters/analysis_id"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisLogResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given image analysis log does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /provenance/python/{analysis_id}/status:
    get:
      tags: [Provenance]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_provenance_python_status
      summary: Show status of a provenance check.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested provenance check.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "404":
          description: No analysis with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /python-package-index:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_python_package_indexes
      summary: List registered Python package indexes.
      responses:
        "200":
          description: Listing of available Python package indexes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageIndexes"

  /advise/python:
    post:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_advise_python
      summary: Get advise for Python ecosystem.
      requestBody:
        required: true
        description: Specification of Python application stack with runtime specific information.
        content:
          application/json:
            schema:
              x-body-name: input
              $ref: "#/components/schemas/AdviseInput"
      parameters:
        - name: recommendation_type
          in: query
          description: Recommendation type.
          required: true
          schema:
            type: string
            enum:
              - stable
              - testing
              - latest
              - performance
              - security
            default: stable
        - name: count
          in: query
          description: Number of software stacks that should be returned.
          schema:
            type: integer
          required: false
        - name: limit
          in: query
          description: Limit number of software stacks scored.
          schema:
            type: integer
          required: false
        - name: origin
          in: query
          required: false
          description: >
            A repository where the application stack is used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: source_type
          in: query
          required: false
          description: >
            A flag marking what Thoth integration is requesting adviser:
              - cli: Thamos CLI.
              - s2i: OpenShift's S2I (Source-to-Image) build.
              - kebechet: Kebechet Bot.
              - jupyter_notebook: Jupyter Notebook (nb-requirements).
          schema:
            type: string
            nullable: true
            enum:
              - cli
              - s2i
              - github_app
              - kebechet
              - jupyter_notebook
        - name: dev
          in: query
          required: false
          description: >
            Consider or do not consider development dependencies when resolving stacks.
          schema:
            type: boolean
            default: false
        - name: debug
          in: query
          required: false
          description: >
            Run the given adviser in a verbose mode so developers can debug it.
          schema:
            type: boolean
            default: false
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run adviser.
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: API token for sending authenticated requests.
      responses:
        "202":
          description: The adviser is scheduled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisWithAuthenticationResponse"
        "401":
          description: Unauthorized request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisUnauthorizedError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /container-images:
    get:
      tags: [Container Images]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_thoth_container_images
      summary: List available Thoth container images.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
        - name: os_name
          in: query
          required: false
          description: Name of operating system to consider.
          schema:
            type: string
        - name: os_version
          in: query
          description: Version of operating system to consider.
          schema:
            type: string
        - name: python_version
          in: query
          description: Version of Python interpreter provided.
          schema:
            type: string
        - name: cuda_version
          in: query
          description: Filter based on CUDA version available.
          schema:
            type: string
        - name: image_name
          in: query
          description: Filter based on image name.
          schema:
            type: string
      responses:
        "200":
          description: A list of available Thoth container images.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerImagesResponse"

  /advise/python/{analysis_id}/log:
    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python_log
      summary: Retrieve a adviser run log.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of analysis for which log should be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Retrieved adviser log.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisLogResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given adviser log does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /advise/python/{analysis_id}/status:
    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python_status
      summary: Show status of an adviser computing recommendations.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested adviser run.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "404":
          description: No analysis with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /advise/python/{analysis_id}:
    get:
      tags: [Advise]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_advise_python
      summary: Get computed adviser result based on its id.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Advise id returned on advise request.
          schema:
            type: string
      responses:
        "200":
          description: >
            Computed pinned down stack with information based on
            requested requirements advise.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResultResponse"
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatusResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"
        "404":
          description: The given advise does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /buildlog/{document_id}:
    get:
      tags: [Buildlogs]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_buildlog
      summary: Retrieve the given build log.
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
          description: Build log to be retrieved.
      responses:
        "200":
          description: Successful response.
        "400":
          description: On invalid request.
        "404":
          description: The given build log does not exist.

  /kebechet-webhook:
    post:
      tags: [Kebechet]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: schedule_kebechet_webhook
      summary: Schedule kebechet instance from webhook
      requestBody:
        required: true
        description: Body of a git service webhook
        content:
          application/json:
            schema:
              x-body-name: body
              $ref: "#/components/schemas/KebechetWebhookInput"
              additionalProperties: true
      responses:
        "202":
          description: Accepted
        "400":
          description: Invalid
        "501":
          description: Functionality not supported

  /build-analysis:
    post:
      tags: [Build Analysis]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: post_build
      summary: Analyze the given build imagestream and log.
      requestBody:
        required: true
        description: Fill up the Build details such as output imagestream, base imagestream, and build log.
        content:
          application/json:
            schema:
              x-body-name: build_detail
              $ref: "#/components/schemas/Build"
      parameters:
        - name: base_registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          schema:
            type: string
        - name: base_registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            source registry.
          schema:
            type: string
        - name: base_registry_verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from during the build.
          schema:
            type: boolean
            default: true
        - name: output_registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          schema:
            type: string
        - name: output_registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            destination registry.
          schema:
            type: string
        - name: output_registry_verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled to during the build.
          schema:
            type: boolean
            default: true
        - name: environment_type
          in: query
          required: false
          description: >
            Type of environment (runtime or buildtime) which is being analyzed.
          schema:
            type: string
            enum:
              - buildtime
              - runtime
            default: runtime
        - name: origin
          in: query
          required: false
          description: >
            A remote where the image is being used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers can debug
            analyzer.
          schema:
            type: boolean
            default: false
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: >
            Do not use cached results, always run analysis.
      responses:
        "202":
          description: Successful response with analyzer id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildAnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildAnalysisResponseError"

  /python/platform:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_python_platform
      summary: Get supported platforms for Python ecosystem.
      responses:
        "200":
          description: A list of platforms supported for Python ecosystem.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPlatforms"

  /python/environment:
    get:
      tags: [Environments]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_python_environments
      summary: Get environments available for Python resolutions.
      responses:
        "200":
          description: The number of Python packages in Thoth Knowledge Graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonEnvironments"

  /python/package/dependencies:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_python_package_dependencies
      parameters:
        - name: name
          in: query
          required: true
          description: Name of the Python Package.
          schema:
            type: string
            default: "tensorflow"
        - name: version
          in: query
          required: true
          description: Version of the Python Package.
          schema:
            type: string
            default: "2.0.0"
        - name: index
          in: query
          required: true
          description: Index url of the Python Package.
          schema:
            type: string
            default: "https://pypi.org/simple"
        - name: os_name
          in: query
          required: false
          description: Name of operating system to consider as environment where package is installed in.
          schema:
            type: string
        - name: os_version
          in: query
          description: Version of operating system to consider as environment where package is installed in.
          schema:
            type: string
        - name: python_version
          in: query
          description: Version of Python interpreter used to install the given package.
          schema:
            type: string
        - name: marker_evaluation_result
          in: query
          description: >
            Consider marker evaluation result for the given environment. If set to None, marker
            evaluation result is not taken into account.
          schema:
            type: boolean
            nullable: true
            default: null
      summary: >
        Get direct dependencies of Python libraries. If environment is provided,
        take into account environment markers that are evaluated during dependencies
        installation. If environment is not provided, any environment is considered.
      responses:
        "200":
          description: The number of Python packages in Thoth Knowledge Graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageDependencies"
        "404":
          description: The given record does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageDependenciesError"

  /python/package:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_python_packages
      summary: List Python packages.
      parameters:
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
        - name: os_name
          in: query
          required: false
          description: Name of operating system to consider.
          schema:
            type: string
        - name: os_version
          in: query
          required: false
          description: Version of operating system to consider.
          schema:
            type: string
        - name: python_version
          in: query
          required: false
          description: Version of Python interpreter.
          schema:
            type: string
      responses:
        "200":
          description: Listing of available Python packages.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackagesResponse"

  /python/package/versions:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_python_package_versions
      summary: List versions of the given Python package.
      parameters:
        - name: name
          in: query
          required: true
          description: Name of the Python Package.
          schema:
            type: string
            default: "tensorflow"
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
        - name: os_name
          in: query
          required: false
          description: Name of operating system to consider.
          schema:
            type: string
        - name: os_version
          in: query
          required: false
          description: Version of operating system to consider.
          schema:
            type: string
        - name: python_version
          in: query
          required: false
          description: Version of Python interpreter.
          schema:
            type: string
      responses:
        "200":
          description: Listing of available Python versions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageVersionsResponse"
        "404":
          description: The given record does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageVersionsResponseError"

  /python/package/version/environments:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: list_python_package_version_environments
      summary: List environments used to solve the given Python package.
      parameters:
        - name: name
          in: query
          required: true
          description: Name of the Python package.
          schema:
            type: string
            default: flask
        - name: version
          in: query
          required: true
          description: Version of the Python package.
          schema:
            type: string
            default: "2.0.2"
        - name: index
          in: query
          required: true
          description: Index url of the Python package.
          schema:
            type: string
            default: "https://pypi.org/simple"
        - name: page
          in: query
          required: false
          description: Page offset in pagination.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Listing of environments used to solve the given Python package.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageVersionEnvironmentsResponse"

  /python/package/version/metadata:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_python_package_version_metadata
      summary: Get metadata for the given package.
      parameters:
        - name: name
          in: query
          required: true
          description: Name of the Python Package.
          schema:
            type: string
        - name: version
          in: query
          required: true
          description: Version of the Python package.
          schema:
            type: string
        - name: index
          in: query
          required: true
          description: Index URL for the Python package.
          schema:
            type: string
        - name: os_name
          in: query
          required: true
          description: Name of operating system to consider.
          schema:
            type: string
        - name: os_version
          in: query
          required: true
          description: Version of operating system to consider.
          schema:
            type: string
        - name: python_version
          in: query
          required: true
          description: Version of Python interpreter.
          schema:
            type: string
      responses:
        "200":
          description: Metadata information for the given Python package version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageVersionMetadataResponse"
        "404":
          description: No record found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageVersionMetadataResponseError"

  /python/imports:
    get:
      tags: [PythonPackages]
      x-openapi-router-controller: thoth.user_api.api_v1
      operationId: get_package_from_imported_packages
      summary: List imported packages' (name, version, index).
      parameters:
        - name: import_name
          in: query
          required: true
          description: >
            Names of the Python Packages (name, version, index) for the given import package name.
          schema:
            type: string
            default: "sklearn.cluster.MiniBatchKMeans"
      responses:
        "200":
          description: Listing of available Python packages names.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageNameImportResponse"
        "404":
          description: The given record does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PythonPackageNameResponseError"

components:
  parameters:
    image:
      name: image
      in: query
      required: true
      description: >
        Name of image - can also specify remote registry to pull
        image from.
      schema:
        type: string
    registry_user:
      name: registry_user
      in: query
      required: false
      description: >
        Registry user to be used for pulling images from registry.
      schema:
        type: string
    registry_password:
      name: registry_password
      in: query
      required: false
      description: >
        Registry password or token to be used for pulling images from
        registry.
      schema:
        type: string
    verify_tls:
      name: verify_tls
      in: query
      required: false
      description: >
        Verify TLS certificates of registry from where images are
        pulled from.
      schema:
        type: boolean
        default: true
    analysis_id:
      name: analysis_id
      in: path
      required: true
      description: An id of requested analysis.
      schema:
        type: string
    page:
      name: page
      in: query
      required: false
      description: Page offset in pagination.
      schema:
        type: integer
        default: 0
    environment_name:
      name: environment_name
      in: path
      required: true
      description: >
        Software environment name for run for which analyses should be retrieved.
      schema:
        format: path
        type: string

  schemas:
    Build:
      type: object
      properties:
        base_image:
          type: string
          nullable: true
          description: >
            Name of base image used by the s2i build.
          example: quay.io/thoth-station/s2i-thoth-ubi8-py38
        output_image:
          type: string
          nullable: true
          description: >
            Name of output image - can also specify remote registry to pull
            image from.
          example: quay.io/thoth-station/s2i-thoth-ubi8-py38
        build_log:
          type: object
          description: >
            A full build details along with the log.
          properties:
            log:
              type: string
              nullable: true
              description: >
                A full build or installation log that was output during image build.
              example: >
                Collecting tensorflow
                Downloading tensorflow-1.4.1-cp36-cp36m-manylinux1_x86_64.whl (41.2MB)
                Successfully installed tensorflow-1.4.1
            apiversion:
              type: string
              nullable: true
              description: >
                BuildLog api version.
              example: >
                "apis/build.openshift.io/v1/namespaces/$NAMESPACE/builds HTTP/1.1"
            kind:
              type: string
              nullable: true
              description: >
                Type of log.
              example: >
                "BuildLog"
            metadata:
              type: string
              nullable: true
              properties:
                annotations:
                  type: string
                  properties:
                    ? buildlog.thoth-station.ninja/corresponding-build-configuration
                    : type: string
                      description: >
                        Contains all particulars about the build log.
                      example: >
                        "apiVersion:build.openshift.io/v1"
    Log:
      type: object
      required:
        - "log"
      properties:
        log:
          type: string
          description: >
            A full build or installation log that was output during image build.
          example: >
            Collecting tensorflow
            Downloading tensorflow-1.4.1-cp36-cp36m-manylinux1_x86_64.whl (41.2MB)
            Successfully installed tensorflow-1.4.1
        apiversion:
          type: string
          description: >
            BuildLog api version.
          example: >
            "apis/build.openshift.io/v1/namespaces/$NAMESPACE/builds HTTP/1.1"
        kind:
          type: string
          description: >
            Type of log.
          example: >
            "BuildLog"
        metadata:
          type: string
          properties:
            annotations:
              type: string
              properties:
                buildlog.thoth-station.ninja/corresponding-build-configuration:
                  type: string
                  description: >
                    Contains all particulars about the build log.
                  example: >
                    "apiVersion:build.openshift.io/v1"
    PythonStack:
      type: object
      required:
        - requirements
        - requirements_lock
      properties:
        requirements:
          type: string
          minLength: 1
          description: Direct dependencies for the application stack.
          example: |
            [[source]]
            url = "https://pypi.python.org/simple"
            verify_ssl = true
            name = "pypi"

            [packages]
            daiquiri = "*"

            [dev-packages]
        requirements_lock:
          type: string
          description: Fully pinned down dependency stack.
          example: '{
            "_meta": {
            "hash": {
            "sha256": "fecd8a66514e1129f796d7a45a1f5b2f7733e3ae0ead487ca63752da680ab8e4"
            },
            "pipfile-spec": 6,
            "requires": {},
            "sources": [
            {
            "name": "pypi",
            "url": "https://pypi.python.org/simple",
            "verify_ssl": true
            }
            ]
            },
            "default": {
            "daiquiri": {
            "hashes": [
            "sha256:1c4942ef0d40920100162ede6024edd43734e40b8dca9b13ebaf4b52ea198457",
            "sha256:eb300dfddae43dfdb157938a854b1387298b8fb340d6ecb7b5ae867283af763e"
            ],
            "index": "pypi",
            "version": "==1.4.0"
            }
            },
            "develop": {}
            }'
        requirements_format:
          type: string
          description: >
            Lockfile format - defaults to pipenv if not explicitly specified.
          items:
            type: string
          enum:
            - pipenv
          example: pipenv
    RuntimeEnvironment:
      type: object
      description: Runtime environment description, see Thamos configuration for more info.
      additionalProperties: true
      properties:
        hardware:
          type: object
          description: Hardware configuration used.
        operating_system:
          type: object
          description: Operating system used.
          nullable: true
        python_version:
          type: string
          example: "3.6"
          description: Python version on which the application runs on.
          nullable: true
        cuda_version:
          type: string
          example: "9.0"
          description: Nvidia CUDA version which the application uses.
          nullable: true
        openblas_version:
          type: string
          example: "0.3.13"
          description: OpenBLAS version used, if any.
          nullable: true
        openmpi_version:
          type: string
          example: "4.1"
          description: Open MPI version used, if any.
          nullable: true
        cudnn_version:
          type: string
          example: "8"
          description: NVIDIA cuDNN version used, if any.
          nullable: true
        mkl_version:
          type: string
          example: "2021.1.1"
          description: Intel® Math Kernel Library version used, if any.
          nullable: true
        platform:
          type: string
          example: "linux-x86_64"
          description: Platform used - corresponds to sysconfig.get_platform() call.
          nullable: true
        base_image:
          type: string
          example: "https://quay.io/repository/thoth-station/s2i-thoth-ubi8-py38:v0.23.1"
          description: A base container image used to run the application.
          nullable: true
        name:
          type: string
          example: "ubi:8-prod"
          description: User defined name of the runtime environment.
        ipython:
          type: object
          description: >
            Additional information captured when recommendations were requested for Jupyter Notebook environments.
    ProvenanceInput:
      type: object
      required:
        - application_stack
      properties:
        application_stack:
          $ref: "#/components/schemas/PythonStack"
        kebechet_metadata:
          $ref: "#/components/schemas/KebechetMetadata"
        justification:
          $ref: "#/components/schemas/Justification"
        stack_info:
          $ref: "#/components/schemas/StackInfo"
    AdviseInput:
      type: object
      required:
        - application_stack
      properties:
        application_stack:
          $ref: "#/components/schemas/PythonStack"
        constraints:
          type: string
          description: Constraints to apply during the resolution.
          example: 'flask>=1.0'
          nullable: true
        runtime_environment:
          $ref: "#/components/schemas/RuntimeEnvironment"
        labels:
          type: object
          description: Labels used to label the request.
          nullable: true
        library_usage:
          type: object
          description: Static analysis of libraries used within user's project.
          required:
            - version
            - report
          properties:
            version:
              type: string
            report:
              type: object
        kebechet_metadata:
          $ref: "#/components/schemas/KebechetMetadata"
        justification:
          $ref: "#/components/schemas/Justification"
        stack_info:
          $ref: "#/components/schemas/StackInfo"
    ImageMetadataResponse:
      type: object
      description: Response information with image metadata.
      properties:
        name:
          type: string
          description: Name of the image with optional tag.
          example: "fedora"
        tag:
          type: string
          description: Tag of the image.
          example: "latest"
        digest:
          type: string
          description: Digest of the image.
          example: sha256:cfd8f071bf8da7a466748f522406f7ae5908d002af1b1a1c0dcf893e183e5b32''
        repo_tags:
          type: array
          items:
            type: string
            description: Tags available in the registry repository.
        created:
          type: string
          description: Image creation date and time.
          example: "2016-03-04T18:40:02.92155334Z"
        docker_version:
          type: string
          description: Version of Docker.
          example: "1.9.1"
        labels:
          type: object
          description: Image labels.
        architecture:
          type: string
          description: Target architecture of image.
          example: "amd64"
        os:
          type: string
          description: "Operating system identifier."
        layers:
          type: array
          items:
            type: string
            description: Digests of image layesrs.
      required:
        - name
        - digest
        - repo_tags
        - created
        - docker_version
        - labels
        - architecture
        - os
        - layers
    BuildAnalysisResponse:
      type: object
      description: Response for a submitted build analysis.
      properties:
        base_image_analysis:
          type: object
          description: Response for a submitted analysis.
          nullable: true
          properties:
            analysis_id:
              type: string
              description: >
                An id of submitted analysis for checking its status and its results.
            cached:
              type: boolean
              description: >
                If set to true the given analysis was picked from cache.
        output_image_analysis:
          type: object
          description: Response for a submitted analysis.
          nullable: true
          properties:
            analysis_id:
              type: string
              description: >
                An id of submitted analysis for checking its status and its results.
            cached:
              type: boolean
              description: >
                If set to true the given analysis was picked from cache.
        buildlog_analysis:
          type: object
          description: Response for a submitted analysis.
          nullable: true
          properties:
            analysis_id:
              type: string
              description: >
                An id of submitted analysis for checking its status and its results.
            cached:
              type: boolean
              description: >
                If set to true the given analysis was picked from cache.
        buildlog_document_id:
          type: string
          description: Document identifier for the stored build log.
    AnalysisWithAuthenticationResponse:
      type: object
      description: Response for a submitted analysis.
      properties:
        analysis_id:
          type: string
          description: >
            An id of submitted analysis for checking its status and its results.
        parameters:
          type: object
          description: >
            Parameters echoed back to user (with default parameters if omitted).
        cached:
          type: boolean
          description: >
            If set to true the given analysis was picked from cache.
        authenticated:
          type: boolean
          description: >
            If set to true the given analysis was authenticated.
      required:
        - analysis_id
        - parameters
        - cached
        - authenticated
    AnalysisResponse:
      type: object
      description: Response for a submitted analysis.
      properties:
        analysis_id:
          type: string
          description: >
            An id of submitted analysis for checking its status and its results.
        parameters:
          type: object
          description: >
            Parameters echoed back to user (with default parameters if omitted).
        cached:
          type: boolean
          description: >
            If set to true the given analysis was picked from cache.
      required:
        - analysis_id
        - parameters
        - cached
    PythonPackageIndexes:
      type: object
      description: A listing of Python package indexes.
      required:
        - indexes
      properties:
        indexes:
          type: array
          items:
            type: object
            description: A Python package index.
            required:
              - url
              - warehouse_api_url
              - verify_ssl
            properties:
              url:
                type: string
                description: URL to the Python simple repository as described in PEP 503.
                example: http://pypi.org/simple
              warehouse_api_url:
                type: string
                description: URL to the warehouse API.
                example: https://pypi.org/pypi
                nullable: true
              verify_ssl:
                type: boolean
                description: Use secured connection to warehouse.
                example: true
    BuildAnalysisResponseError:
      type: object
      description: Error Response for a submitted build analysis.
      properties:
        base_image_analysis:
          type: object
          properties:
            error:
              type: string
              description: Error information for user.
            parameters:
              type: object
              description: Parameters echoed back to user for debugging.
        output_image_analysis:
          type: object
          properties:
            error:
              type: string
              description: Error information for user.
            parameters:
              type: object
              description: Parameters echoed back to user for debugging.
        build_log_analysis:
          type: object
          properties:
            error:
              type: string
              description: Error information for user.
            parameters:
              type: object
              description: Parameters echoed back to user for debugging.
      required:
        - base_image_analysis
        - output_image_analysis
        - build_log_analysis
    AnalysisUnauthorizedError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Unauthorized error information.
    AnalysisResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    AnalysisResultResponse:
      type: object
      description: Result of an analysis
      required:
        - metadata
        - result
      properties:
        metadata:
          type: object
          description: Metadata for analysis run.
          required:
            - analyzer
            - analyzer_version
            - arguments
            - datetime
            - distribution
            - hostname
            - python
          properties:
            analyzer:
              type: string
              description: Analyzer name which handled analysis.
            analyzer_version:
              type: string
              description: Version of analyzer handling analysis.
            arguments:
              type: object
              description: Arguments passed to analyzer.
            datetime:
              type: string
              description: Date and time of analysis end in ISO format.
            distribution:
              type: object
              description: >
                Information about environment in which the analysis
                was performed.
              required:
                - codename
                - id
                - like
                - version
                - version_parts
              properties:
                codename:
                  type: string
                  description: >
                    Codename of environment in which the analysis was perfomed.
                id:
                  type: string
                  description: >
                    Identifier of environment in which the analysis
                    was perfomed.
                like:
                  type: string
                  description: >
                    Similar environments in comparision to environment in
                    which the analysis was perfomed.
                version:
                  type: string
                  description: A string representation of environment version.
                version_parts:
                  type: object
                  description: >
                    Parts of version identifier of the analysing environment.
                  properties:
                    build_number:
                      type: string
                    major:
                      type: string
                    minor:
                      type: string
                  required:
                    - build_number
                    - major
                    - minor
            hostname:
              type: string
              description: Pod name where the analysis was done.
            python:
              type: object
              required:
                - api_version
                - implementation_name
                - major
                - minor
                - micro
                - releaselevel
                - serial
              properties:
                api_version:
                  type: integer
                implementation_name:
                  type: string
                  example: cpython
                major:
                  type: integer
                micro:
                  type: integer
                minor:
                  type: integer
                releaselevel:
                  type: string
                  example: final
                serial:
                  type: integer
        result:
          type: object
          description: Actual result of an analysis run.
    AnalysisListingResponse:
      type: object
      description: Listing of available results.
      required:
        - result
        - parameters
      properties:
        result:
          type: array
          description: List of available analysis ids.
          items:
            type: string
            description: Analysis id that is used as a document id.
        parameters:
          type: object
          description: Parameters echoed back to user.
    AnalysisStatusResponse:
      type: object
      description: Information about the current analysis status.
      required:
        - parameters
        - status
      properties:
        status:
          type: object
          description: Status information about the analysis run.
          additionalProperties: true
          required:
            - finished_at
            - reason
            - started_at
            - state
          properties:
            finished_at:
              type: string
              description: >
                Datetime in ISO format informing about when the analysis
                has finished.
              nullable: true
            reason:
              type: string
              description: Reasoning on finished run.
              nullable: true
            started_at:
              type: string
              nullable: true
              description: >
                Datetime in ISO format informing about when the analysis
                has started.
            state:
              type: string
              example: running
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.

    ContainerImagesResponse:
      type: object
      required:
        - container_images
        - parameters
      properties:
        container_images:
          type: array
          items:
            type: object
            additionalProperties: true
            required:
              - environment_name
              - python_version
              - env_image_name
              - env_image_tag
              - image_sha
              - os_name
              - os_version
              - thoth_image_name
              - thoth_image_version
              - cuda_version
              - environment_type
              - package_extract_document_id
              - datetime
            properties:
              environment_name:
                type: string
                nullable: true
              python_version:
                type: string
                nullable: true
                example: '3.8'
              env_image_name:
                type: string
                example: 's2i-minimal-notebook'
              env_image_tag:
                type: string
                example: 'v1.2.3'
              image_sha:
                type: string
              os_name:
                type: string
                example: 'rhel'
              os_version:
                type: string
                example: '8'
              thoth_image_name:
                type: string
                example: 'quay.io/thoth-station/s2i-thoth-ubi8-py38'
                nullable: true
              thoth_image_version:
                type: string
                example: 'v1.0.0'
              cuda_version:
                type: string
                nullable: true
                example: '9.0'
              environment_type:
                type: string
                example: RUNTIME
                enum:
                  - BUILDTIME
                  - RUNTIME
              package_extract_document_id:
                type: string
              datetime:
                type: string
        parameters:
          type: object
          required:
            - page
          properties:
            page:
              type: integer
              example: 0
              description: Page offset in the pagination.

    AnalysisLogResponse:
      type: object
      required:
        - log
        - parameters
      properties:
        log:
          type: string
          description: Analyzer logs printed to stdout/stderr as a plain text.
          nullable: true
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.

    PythonPackagesResponse:
      type: object
      required:
        - packages
      properties:
        packages:
          type: array
          items:
            type: object
            required:
              - package_name
            properties:
              package_name:
                type: string
                nullable: false
                description: Name of the package.
                example: flask

    PythonPackageVersionsResponse:
      type: object
      required:
        - versions
      properties:
        versions:
          type: array
          items:
            type: object
            required:
              - package_name
              - package_version
              - index_url
            properties:
              package_name:
                type: string
                nullable: false
                description: Name of the package.
                example: tensorflow
              package_version:
                type: string
                nullable: false
                description: Version of the package.
                example: "2.0.0"
              index_url:
                type: string
                nullable: false
                description: Source index URL of the package.
                example: "https://pypi.org/simple"

    PythonPackageVersionEnvironmentsResponse:
      type: object
      required:
        - environments
      properties:
        environments:
          type: array
          items:
            type: object
            required:
              - os_name
              - os_version
              - python_version
            properties:
              os_name:
                type: string
                description: Operating system name.
                example: rhel
              os_version:
                type: string
                description: Operating system version.
                example: '9'
              python_version:
                type: string
                description: Python version.
                example: '3.9'

    PythonPackageVersionMetadataResponse:
      type: object
      required:
        - metadata
        - parameters
      properties:
        parameters:
          type: object
        metadata:
          type: object

    PythonPackageVersionMetadataResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.

    PythonPackageNameImportResponse:
      type: object
      required:
        - package_names
        - parameters
      properties:
        package_names:
          type: array
          items:
            type: object
            required:
              - package_name
              - package_version
              - index_url
              - import
            properties:
              package_name:
                type: string
                nullable: false
                description: Name of the package.
                example: scikit-learn
              package_version:
                type: string
                nullable: false
                description: Version of the package.
                example: "1.0.1"
              index_url:
                type: string
                nullable: false
                description: Source index URL of the package.
                example: "https://pypi.org/simple"
              import:
                type: string
                nullable: false
                description: A module import matching the given criteria.
                example: sklearn.neural_network
        parameters:
          type: object

    PythonPackageVersionsResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    PythonPackageNameResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    KebechetWebhookInput:
      type: object
      description: Webhook payload from Github event.
    PythonPlatforms:
      type: object
      description: A listing of available platforms.
      required:
        - platform
      properties:
        platform:
          type: array
          items:
            type: string
            description: Platform information.
            example: linux-x86_64
    PythonEnvironments:
      type: object
      description: A listing of available environments.
      required:
        - environment
      properties:
        environment:
          type: array
          items:
            type: object
            required:
              - os_name
              - os_version
              - python_version
            properties:
              os_name:
                type: string
                description: Operating system name.
                example: rhel
              os_version:
                type: string
                description: Operating system version.
                example: '9'
              python_version:
                type: string
                description: Python version.
                example: '3.9'
    PythonPackageDependencies:
      type: object
      required:
        - dependencies
        - parameters
      properties:
        parameters:
          type: object
        dependencies:
          type: array
          items:
            type: object
            description: Dependency information.
            required:
              - environment_marker
              - extra
              - name
              - version
            properties:
              environment_marker:
                type: string
                nullable: true
              extra:
                type: string
                nullable: true
              name:
                type: string
              version:
                type: string
    PythonPackageDependenciesError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    KebechetMetadata:
      type: object
      description: Dict containing kebechet specific metadata for justification.
      properties:
        message_justification:
          type: integer
          nullable: true
        package_name:
          type: string
          nullable: true
        package_version:
          type: string
          nullable: true
        package_index:
          type: string
          nullable: true
      additionalProperties: true
    StackInfo:
      type: array
      items:
        type: object
        required:
          - message
          - type
          - link
        properties:
          message:
            type: string
          type:
            type: string
          link:
            type: string
        additionalProperties: true
    Justification:
      type: array
      items:
        type: object
        required:
          - message
          - type
          - link
        properties:
          message:
            type: string
          type:
            type: string
          link:
            type: string
        additionalProperties: true


  headers:
    xPage:
      schema:
        type: integer
        description: Current Page
    xPageSize:
      schema:
        type: integer
        description: Page Size
    xTotalPages:
      schema:
        type: integer
        description: Total Pages
